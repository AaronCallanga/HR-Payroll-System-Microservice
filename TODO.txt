CREATE NOTES FOR LEARNINGS:

1. Create config server
2. Test creating lots of container for a specific service and let eureka load balance it. When a service receives a request, log it
3. Implement SAGA
4. Eureka ( w/ replication, even in the microservices)
5. Api gateway (w/ replication too)
6. If ever other service need more info about specific employee (not specified in event) then just do grpc request
7. Would you like me to include an optional multi-module Maven parent pom.xml setup next?
Itâ€™ll make building all modules (like schema, employee-service, etc.) easier with a single mvn clean install before Docker builds.
8. Try to lessen the data send to gRPC, just create many methods that satisfy the needs, no need to send all the data. e.g get all active employee, only send the base salary and id, only send email name id, etc.
10. Scheduled task: create a new leave quota per month/year per employee, clean up or archive histories/logs/audits
11. After approving leave request, send event or do async calls (update the quota, create leave history)
12. Might as well separate attendance and leave service, and create attendance account table
13. Specify the employee events topic, not just employee.event. Try employee.event.created
14. Attendance Service schema update attendance table:   check_in TIMESTAMP, check_out TIMESTAMP,
15. implement scheduling, multithreading (virtual thread), async task, batch processing, and etc...
16. Api gateway send the token/email to the service too for fetching their own records (if employee can ancess the system). If token, make the auth service as grpc server, and let other microservice be client to get the information based on the token or simply do rest client.
17. Implement centralize swagger
