server:
  port: 8080

spring:
  application:
    name: api-gateway

  cloud:
    gateway:
      server:
        webflux:
          default-filters:
            - name: CircuitBreaker
              args:
                name: globalCircuitBreaker # instance name
                fallbackUri: forward:/fallback

          routes:
            - id: auth-service-route
              uri: lb://AUTH-SERVICE
              predicates:
                - Path=/api/v1/auth/**
              filters:
                - StripPrefix=2
                - name: CircuitBreaker
                  args:
                    name: authServiceCB # instance name
                    fallbackUri: forward:/fallback

            - id: employee-service-route
              uri: lb://EMPLOYEE-SERVICE
              predicates:
                - Path=/api/v1/employees/**
              filters:
                - StripPrefix=2 # strip the uri two slash (remove the /api/v1 ) before routing the request
                - JwtValidation # Spring will look for a class that is prefixed with 'GatewayFilterFactory'
                - name: CircuitBreaker
                  args:
                    name: employeeServiceCB
                    fallbackUri: forward:/fallback

            - id: attendance-service-route
              uri: lb://ATTENDANCE-SERVICE
              predicates:
                - Path=/api/v1/attendance/**
              filters:
                - StripPrefix=2
                - JwtValidation

            - id: payroll-service-route
              uri: lb://PAYROLL-SERVICE
              predicates:
                - Path=/api/v1/payroll/**
              filters:
                - StripPrefix=2
                - JwtValidation

            - id: performance-review-service-route
              uri: lb://PERFORMANCE-REVIEW-SERVICE
              predicates:
                - Path=/api/v1/performance-reviews/**
              filters:
                - StripPrefix=2
                - JwtValidation
          httpclient:
            connect-timeout: 2000
            response-timeout: 5s

    # Cloud Bus
    bus:
      enabled: true
    stream:
      default-binder: rabbit
      bindings:
        springCloudBusInput:
          destination: springCloudBus
          group: ${spring.application.name}

  # Config Client
  config:
    import: optional:configserver:${CONFIG_SERVER_URL:http://localhost:8888}

# RabbitMQ
  rabbitmq:
    addresses: ${RABBITMQ_URL:localhost:5672}
    username: ${RABBITMQ_USERNAME:admin_user}
    password: ${RABBITMQ_PASSWORD:password}

# Eureka
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka}

# Auth Service URL
auth:
  service:
    url: ${AUTH_SERVICE_URL:http://localhost:4005}

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: busrefresh, refresh, health
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always

# Circuit Breaker
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10 # No. of request to monitor
        failureRateThreshold: 50 # If 50% of request in the sliding window size fails, OPEN the circuitbreaker
        waitDurationInOpenState: 10s # After 10 seconds, transition to HALF_OPEN state
        permittedNumberOfCallsInHalfOpenState: 3 # If at least one of the request passed, transition to CLOSED state
        automaticTransitionFromOpenToHalfOpenEnabled: true
        minimum-number-of-calls: 5 # Start monitoring the request after 5 request. If not specified, it will require 10 request before it checks if there are any failed request
        register-health-indicator: true
      groupA: # You can define many groups which instances can inherit too
        sliding-window-size: 5
        failure-rate-threshold: 50
        minimum-number-of-calls: 2
    instances: # Create amn instance of circuitbreaker that individual service can use
      globalCircuitBreaker:
        base-config: default
      authServiceCB:
        base-config: groupA # Inherits the properties/configuration of group configs, otherwise, default configs
        wait-duration-in-open-state: 5s # Overwrite this properties
      employeeServiceCB:
        base-config: groupA
# Retry
# Timelimiter (gateway timeout global or resilience4j timelimiter for service to service?)
# Rate limiter (redis distributed)



