server:
  port: 8080

spring:
  application:
    name: api-gateway

  cloud:
    gateway:
      server:
        webflux:
          default-filters:
            - name: CircuitBreaker
              args:
                name: globalCircuitBreaker # instance name
                fallbackUri: forward:/fallback
            - name: Retry
              args:
                retries: 3 # (1 initial + 2 retries)
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT, INTERNAL_SERVER_ERROR, SERVICE_UNAVAILABLE
                methods: GET # Only retry idempotent methods
                backoff: # Calculate the waiting time/delay per retry
                  firstBackoff: 200ms       # Wait 200ms before first retry
                  maxBackoff: 2s            # Wait no more than 2s total between retries, maximum delay is 2s
                  factor: 2                 # Exponential backoff factor
                  basedOnPreviousValue: true
                jitter: # Randomize backoff to avoid retry storms
                  randomFactor: 0.5         # +/- 50% random delay
                timeout: 6s                 # Stop retrying after 6 seconds total (including backoff)

          routes:
            - id: auth-service-route
              uri: lb://AUTH-SERVICE
              predicates:
                - Path=/api/v1/auth/**
              filters:
                - StripPrefix=2
                - name: CircuitBreaker
                  args:
                    name: authServiceCB # instance name
                    fallbackUri: forward:/fallback

            - id: employee-service-route
              uri: lb://EMPLOYEE-SERVICE
              predicates:
                - Path=/api/v1/employees/**
              filters:
                - StripPrefix=2 # strip the uri two slash (remove the /api/v1 ) before routing the request
                - JwtValidation # Spring will look for a class that is prefixed with 'GatewayFilterFactory'
                - name: CircuitBreaker
                  args:
                    name: employeeServiceCB
                    fallbackUri: forward:/fallback

            - id: attendance-service-route
              uri: lb://ATTENDANCE-SERVICE
              predicates:
                - Path=/api/v1/attendance/**
              filters:
                - StripPrefix=2
                - JwtValidation

            - id: payroll-service-route
              uri: lb://PAYROLL-SERVICE
              predicates:
                - Path=/api/v1/payroll/**
              filters:
                - StripPrefix=2
                - JwtValidation

            - id: performance-review-service-route
              uri: lb://PERFORMANCE-REVIEW-SERVICE
              predicates:
                - Path=/api/v1/performance-reviews/**
              filters:
                - StripPrefix=2
                - JwtValidation
# Timeout/TimeLimiter
          httpclient:
            response-timeout: 5s # How long the gateway waits for the backend to send a full HTTP response after connection.
            connect-timeout: 2000

    # Cloud Bus
    bus:
      enabled: true
    stream:
      default-binder: rabbit
      bindings:
        springCloudBusInput:
          destination: springCloudBus
          group: ${spring.application.name}

    circuitbreaker:
      resilience4j:
        disable-time-limiter: true

  # Config Client
  config:
    import: optional:configserver:${CONFIG_SERVER_URL:http://localhost:8888}

# RabbitMQ
  rabbitmq:
    addresses: ${RABBITMQ_URL:localhost:5672}
    username: ${RABBITMQ_USERNAME:admin_user}
    password: ${RABBITMQ_PASSWORD:password}

# Redis
  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 2s
      password: redis_password

# Eureka
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka}

# Auth Service URL
auth:
  service:
    url: ${AUTH_SERVICE_URL:http://localhost:4005}

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: busrefresh, refresh, health
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always

# Circuit Breaker
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10 # No. of request to monitor
        failureRateThreshold: 50 # If 50% of request in the sliding window size fails, OPEN the circuitbreaker
        waitDurationInOpenState: 10s # After 10 seconds, transition to HALF_OPEN state
        permittedNumberOfCallsInHalfOpenState: 3 # If at least one of the request passed, transition to CLOSED state
        automaticTransitionFromOpenToHalfOpenEnabled: true
        minimum-number-of-calls: 5 # Start monitoring the request after 5 request. If not specified, it will require 10 request before it checks if there are any failed request
        register-health-indicator: true
      groupA: # You can define many groups which instances can inherit too, overrides the default configurations
        sliding-window-size: 5
        failure-rate-threshold: 50
        minimum-number-of-calls: 2
    instances: # Create an instance of circuitbreaker that individual service can use
      globalCircuitBreaker:
        base-config: default
      authServiceCB:
        base-config: groupA # Inherits the properties/configuration of group configs, otherwise, default configs
        wait-duration-in-open-state: 5s # Overwrite this properties
      employeeServiceCB:
        base-config: groupA






  # Time Limiter (you can just use this in service to service communications, and use native gateway timeout instead)
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 4s # lower than the timeout response(gateway level)
#        cancel-running-future: true # cancels the operation for non blocking calls
#    instances:
#      globalCircuitBreaker: # apply and attach this configurations (of Time Limiter) to the instance of circuit breaker (must be the same name)
#        base-config: default
#      authServiceCB:
#        base-config: default
#      employeeServiceCB:
#        base-config: default

#resilience4j:
#  retry:
#    configs:
#      default:
#        max-attempts: 3              # total attempts (1 initial + 2 retries)
#        wait-duration: 1s            # wait time between retries
#        retry-exceptions:
#          - java.io.IOException
#          - org.springframework.web.reactive.function.client.WebClientResponseException
#        ignore-exceptions:
#          - java.lang.IllegalArgumentException
#      groupA:
#        max-attempts: 2
#        wait-duration: 500ms
#
#    instances:
#      globalCircuitBreaker:
#        base-config: default
#      authServiceCB:
#        base-config: groupA
#      employeeServiceCB:
#        base-config: default
